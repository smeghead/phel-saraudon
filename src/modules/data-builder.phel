(ns saraudon\modules\data-builder
  (:require phel\str :as s)
  (:require saraudon\modules\types))

(defstruct temporary-node [path modify-lines])

(defstruct node [id path label modify-lines commit-count])

(defstruct temporary-link [source target])

(defstruct link [source target count])

(defstruct data [nodes links])

(defn- get-temprary-nodes [commits]
  (loop [commits commits
         acc []]
    (if (empty? commits)
       acc
      (recur (rest commits) (concat acc (map |(temporary-node ($ :path) ($ :modify-lines)) ((first commits) :files)))))))

(defn- search-temporary-nodes [t-nodes n]
  (loop [t-nodes t-nodes
         acc []]
    (if (empty? t-nodes)
      acc
      (let [t-node (first t-nodes)]
        (recur (rest t-nodes) (if (= (t-node :path) (n :path))
                                (push acc t-node)
                                acc))))))

(defn- get-unique-temporary-nodes [t-nodes]
  (loop [nodes t-nodes
         acc []]
    (if (empty? nodes)
      acc
      (let [n (first nodes)
            exists? (find |(if (empty? $)
                             false
                             (= ($ :path) (n :path))) acc)]
        (recur (rest nodes) (if exists?
                              acc
                              (push acc n)))))))

(defn- get-nodes [commits]
  (let [t-nodes (get-temprary-nodes commits)
        unique-temporary-nodes (get-unique-temporary-nodes t-nodes)]
    (loop [nodes unique-temporary-nodes
           id 0
           acc []]
      (if (empty? nodes)
        acc
        (let [t-node (first nodes)
              same-nodes (search-temporary-nodes t-nodes t-node)
              path (t-node :path)
              label (s/replace path "/^.*\/([^\/]*)$/" "$1")
              amount-modify-lines (sum (map |($ :modify-lines) same-nodes))
              commit-count (count same-nodes)]
          (recur (rest nodes) (inc id) (push acc (node id path label amount-modify-lines commit-count))))))))

(defn- same-link [a b]
  (or (and (= (a :source) (b :source))
           (= (a :target) (b :target)))
      (and (= (a :source) (b :target))
           (= (a :target) (b :source)))))

(defn- generate-links [links]
  (loop [links links
         acc []]
    (if (empty? links)
      acc
      (let [t-link (first links)
            exists? (not= (count (filter |(same-link $ t-link) acc)) 0)]
        (if exists?
          (recur (rest links) acc)
          (let [count (count (filter |(same-link $ t-link) links))]
            (recur (rest links) (push acc (link (t-link :source) (t-link :target) count)))))))))

(defn- get-links [commits node-map]
  (let [links (loop [commits commits
                     acc []]
                (if (empty? commits)
                  acc
                  (let [new-links (filter
                                    truthy?
                                    (for [source :in ((first commits) :files)
                                          target :in ((first commits) :files)]
                                      (if (= (source :path) (target :path))
                                        nil
                                        (temporary-link (node-map (source :path)) (node-map (target :path))))))]
                    (recur (rest commits) (concat acc new-links)))))]
    (generate-links links)))

(defn- node-map [nodes]
  (loop [nodes nodes
         node-map {}]
    (if (empty? nodes)
      node-map
      (recur (rest nodes) (put node-map ((first nodes) :path) ((first nodes) :id))))))

(defn build [commits]
  (let [nodes (get-nodes commits)
        node-map (node-map nodes)
        links (get-links commits node-map)]
    (data nodes links)))
